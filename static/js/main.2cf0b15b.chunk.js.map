{"version":3,"sources":["NoteList.js","SearchTag.js","Note.js","App.js","serviceWorker.js","index.js"],"names":["NoteList","this","props","notes","changeCurrentNote","deletenote","query","className","ListGroup","map","note","arr","qry","console","log","length","i","includes","findit","tags","ListGroupItem","key","id","onClick","heading","curdate","tag","React","Component","SearchTag","save","textInput","value","changeCurrentQuery","placeholder","ref","input","onChange","Note","textAreaInput","textInput2","split","savenote","nextProps","newProps","event","notesArray","localStorage","getItem","JSON","parse","App","state","currentNote","search","setState","filter","noteIterator","saveNote","concat","setItem","stringify","addNew","DateFormat","today","Date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","sort","a","b","Button","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2cf0b15b.chunk.js","sourcesContent":["import React from 'react';\nimport './NoteList.css';\nimport { ListGroup, ListGroupItem } from 'reactstrap'\n\nexport default class NoteList extends React.Component {\n    render () {\n        const {notes, changeCurrentNote, deletenote, query} = this.props\n        return (\n            <div className=\"col-sm-4\">\n                <center>\n                    <div className=\"Note-list\">\n                        <ListGroup className='Note-list-frame'>\n                        { notes.map((note) => (\n                            (findit(note.tags, query)) && ( //findit(note.tags, query)\n                            <ListGroupItem \n                            className=\"Note-item\" \n                            key={notes.id} \n                            onClick={() => changeCurrentNote(note)}>\n                            <button className=\"Delete-note\" onClick={ () => deletenote(note)}>X</button>\n                                <p className=\"Head-row\">{note.heading}</p>\n                                <p className=\"Date-row\">{note.curdate}</p>\n                                {note.tags.map((tag) => (\n                                    (tag !== '') && (tag !== ' ') && (\n                                    <div className=\"Tag-box\">\n                                        <p className=\"Tag-row\">{tag}</p>\n                                    </div>\n                                    )\n                                ))}\n                            </ListGroupItem>\n                            )\n                        ))}\n                        </ListGroup>\n                    </div> \n                </center>\n            </div>\n        );\n    }\n}\n\nfunction findit(arr, qry){\n    console.log(\"Entra a la funcion\")\n    console.log(arr)\n    if (!arr.length) {\n        return true\n    }\n    for (let i = 0; i < arr.length; i++) {\n        const el = arr[i];\n        if (el.includes(qry)) {\n           return true \n        }\n    }\n    return false\n}\n\n","import React from 'react';\nimport './SearchTag.css';\n//import { Input } from 'reactstrap'\n\nexport default class SearchTag extends React.Component {\n    save = (qry) => {\n        qry = this.textInput.value \n        this.props.changeCurrentQuery(qry)\n    }\n\n    render() {\n        let qry\n        return (\n            <div className=\"col-sm p-1 m-1 Search\">\n                <input className=\"Search-input\" placeholder=\"Tag...\" ref={(input) => { this.textInput = input }} onChange={()=>this.save(qry) }/>\n            </div>\n        );\n    }\n}\n\n/*<input className=\"Search-input\" placeholder=\"Tag...\"/> */","import React from 'react';\nimport './Note.css';\n//import { Input } from 'reactstrap';\n\nexport default class Note extends React.Component{\n    componentWillReceiveProps(nextProps) {\n        const newProps = nextProps\n        this.textInput.value = newProps.note.heading\n        this.textAreaInput.value = newProps.note.value\n        this.textInput2.value = newProps.note.tags\n    }\n    save = (note) => {\n        note.heading = this.textInput.value\n        note.value = this.textAreaInput.value\n        note.tags = this.textInput2.value.split(',') //\"ta, t2, t3\"\n        this.props.savenote(note)\n    }\n\n    render(){\n        const { note } = this.props;\n        return(\n\n                <div className=\"Note\">\n                    <input className=\"Note-title \" placeholder=\"Title Here...\" ref={(input) => { this.textInput = input }} onChange={(event)=>this.save(note) }/>\n                    <div className=\"dash Up\"/>\n                    <textarea className=\"Note-body \" placeholder=\"Text Here...\" ref={(input) => { this.textAreaInput = input}} onChange={()=>this.save(note) }/>\n                    <div className=\"dash Down\"/>\n                    <input className=\"Note-tags \" placeholder=\"Tags Here...\" ref={(input) => { this.textInput2 = input}} onChange={(event)=>this.save(note) }/>\n                </div>\n            \n        );\n    }\n}\n\n","import React from 'react';\nimport './App.css';\nimport NoteList from './NoteList';\nimport Search from './SearchTag';\nimport Note from './Note';\nimport { Button } from 'reactstrap';\n\nlet isThere = !!localStorage.getItem('datos')\nconst notesArray = isThere ? JSON.parse(localStorage.getItem('datos')) : []\n\nexport default class App extends React.Component {\n  state = {\n    currentNote: null,\n    notes: notesArray,\n    search: ''\n  }\n\n  changeCurrentQuery = (qry) => {\n    this.setState({ search: qry })\n  }\n\n  changeCurrentNote = (note) =>{\n    this.setState({ currentNote: note })\n  }\n\n  deletenote = (note) =>{\n    this.setState((state) => ({ notes: state.notes.filter(noteIterator => (noteIterator.id !== note.id)) }))\n    this.changeCurrentNote(null);\n  }\n\n  saveNote = (note) =>{\n    this.setState((state) => { state.notes.concat([note]) })\n    this.setState({ currentNote: note })\n    localStorage.setItem('datos', JSON.stringify(this.state.notes));\n  }\n\n  addNew = () =>{\n    const note = {id: this.state.notes.length + 1, heading: 'New Title', curdate: this.DateFormat(), value: ' ', tags:[]}\n    this.setState((state) => ({ notes: state.notes.concat([note]) }))\n    this.setState({ currentNote: note })\n    //console.log(\"El id de esta iteracion es: \"+note.id)\n  }\n\n  DateFormat() {\n    var today = new Date();\n    var date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\n    var time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n    return date+' '+time;\n  }\n\n  render(){\n    this.state.notes.sort((a, b) => {return b.id-a.id})\n    return (\n      <div className=\"container-fluid p-3\">\n        <div className=\"row align-items-center\">\n          <div className=\"col-sm p-1 m-1 Title-style\">Note - To - Pad</div>\n          <Search changeCurrentQuery={this.changeCurrentQuery}/>\n          <div className=\"col-sm p-1 m-1 center-block\">\n            <center>\n              <Button className=\"Add-note\" onClick={this.addNew}>\n                <p className=\"Add-note-text\">New</p>\n              </Button>\n            </center>\n          </div>\n        </div>\n        <div className=\"row\">\n          <NoteList notes={this.state.notes} changeCurrentNote={this.changeCurrentNote} deletenote={this.deletenote} query={this.state.search}/>\n          <div className=\"col\">\n            {( this.state.currentNote === null ) && \n            ( <div className=\"Note-mask\"/>)}\n            {( this.state.currentNote !== null ) && ( <Note note={this.state.currentNote} savenote={this.saveNote}/> )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}